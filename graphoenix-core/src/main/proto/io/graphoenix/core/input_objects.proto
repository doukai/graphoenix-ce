syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.graphoenix.core.dto.inputObjectType.grpc";

package io.graphoenix.core;

import "io/graphoenix/core/enums.proto";
import "google/protobuf/timestamp.proto";

message MetaInput {
    string id = 1;
    int32 version = 2;
    int32 realm_id = 3;
    string create_user_id = 4;
    google.protobuf.Timestamp create_time = 5;
    string update_user_id = 6;
    google.protobuf.Timestamp update_time = 7;
    string create_group_id = 8;
}
message MetaExpression {
    StringExpression id = 1;
    IntExpression realm_id = 2;
    StringExpression create_user_id = 3;
    StringExpression create_time = 4;
    StringExpression update_user_id = 5;
    StringExpression update_time = 6;
    StringExpression create_group_id = 7;
}
message IDExpression {
    Operator opr = 1;
    string val = 2;
    repeated string arr = 3;
    bool skip_null = 4;
}
message StringExpression {
    Operator opr = 1;
    string val = 2;
    repeated string arr = 3;
    bool skip_null = 4;
}
message BooleanExpression {
    Operator opr = 1;
    bool val = 2;
    repeated bool arr = 3;
    bool skip_null = 4;
}
message IntExpression {
    Operator opr = 1;
    int32 val = 2;
    repeated int32 arr = 3;
    bool skip_null = 4;
}
message FloatExpression {
    Operator opr = 1;
    float val = 2;
    repeated float arr = 3;
    bool skip_null = 4;
}
message With {
    string type = 1;
    string from = 2;
    string to = 3;
}
message Invoke {
    string package = 1;
    string class_name = 2;
    string method_name = 3;
    repeated InvokeParameter parameters = 4;
    string return_class_name = 5;
    repeated string thrown_types = 6;
    bool async = 7;
    string directive_name = 8;
    bool on_field = 9;
    bool on_input_value = 10;
    bool on_expression = 11;
}
message InvokeParameter {
    string name = 1;
    string class_name = 2;
}
/**
* Query Expression Input for Operator
*/
message OperatorExpression {
    Operator opr = 1; /* Operators */
    Operator val = 2; /* Value */
    repeated Operator arr = 3; /* Array */
}
/**
* Query Expression Input for Conditional
*/
message ConditionalExpression {
    Operator opr = 1; /* Operators */
    Conditional val = 2; /* Value */
    repeated Conditional arr = 3; /* Array */
}
/**
* Query Expression Input for Sort
*/
message SortExpression {
    Operator opr = 1; /* Operators */
    Sort val = 2; /* Value */
    repeated Sort arr = 3; /* Array */
}
/**
* Query Expression Input for Func
*/
message FuncExpression {
    Operator opr = 1; /* Operators */
    Func val = 2; /* Value */
    repeated Func arr = 3; /* Array */
}
/**
* Query Expression Input for Protocol
*/
message ProtocolExpression {
    Operator opr = 1; /* Operators */
    Protocol val = 2; /* Value */
    repeated Protocol arr = 3; /* Array */
}