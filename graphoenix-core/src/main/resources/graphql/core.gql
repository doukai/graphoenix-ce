scalar ID
scalar Int
scalar Float
scalar String
scalar Boolean
scalar BigInteger
scalar BigDecimal
scalar Date
scalar Time
scalar DateTime
scalar Timestamp
scalar Upload
enum Operator @tool(description: "EQ: Equal to, NEQ: Not equal to, LK: Like, NLK: Not like, GT: Greater than, GTE: Greater than or equal to, LT: Less than, LTE: Less than or equal to, NIL: Is null, NNIL: Not null, IN: In, NIN: Not in, BT: Between, NBT: Not between") {
    EQ
    NEQ
    LK
    NLK
    GT
    GTE
    LT
    LTE
    NIL
    NNIL
    IN
    NIN
    BT
    NBT
}
enum Conditional @tool(description: "AND: And, OR: Or") {
    AND
    OR
}
enum Sort @tool(description: "ASC: Ascending, DESC: Descending") {
    ASC
    DESC
}
enum Func {
    COUNT
    MAX
    MIN
    SUM
    AVG
}
enum Protocol {
    LOCAL
    GRPC
    HTTP
    RSOCKET
}
interface Meta {
    isDeprecated: Boolean @options(default: "false")
    version: Int
    realmId: Int
    createUserId: String
    createTime: Timestamp
    updateUserId: String
    updateTime: Timestamp
    createGroupId: String
}
input MetaInput @interface {
    version: Int
    realmId: Int
    createUserId: String
    createTime: Timestamp
    updateUserId: String
    updateTime: Timestamp
    createGroupId: String
}
input MetaExpression @interface {
    realmId: IntExpression
    createUserId: StringExpression
    createTime: StringExpression
    updateUserId: StringExpression
    updateTime: StringExpression
    createGroupId: StringExpression
}
type PageInfo @container {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
    endCursor: String!
}
input IDExpression @tool(description: "Query id") {
    opr: Operator = EQ @tool(description: "Operator")
    val: ID @tool(description: "Value for operator")
    arr: [ID] @tool(description: "Array for operator")
    skipNull: Boolean = false @tool(description: "Skip null value")
}
input StringExpression @tool(description: "Query string") {
    opr: Operator = EQ @tool(description: "Operator")
    val: String @tool(description: "Value for operator")
    arr: [String] @tool(description: "Array for operator")
    skipNull: Boolean = false @tool(description: "Skip null value")
}
input BooleanExpression @tool(description: "Query boolean") {
    opr: Operator = EQ @tool(description: "Operator")
    val: Boolean @tool(description: "Value for operator")
    arr: [Boolean] @tool(description: "Array for operator")
    skipNull: Boolean = false @tool(description: "Skip null value")
}
input IntExpression @tool(description: "Query number") {
    opr: Operator = EQ @tool(description: "Operator")
    val: Int @tool(description: "Value for operator")
    arr: [Int] @tool(description: "Array for operator")
    skipNull: Boolean = false @tool(description: "Skip null value")
}
input FloatExpression @tool(description: "Query decimal") {
    opr: Operator = EQ @tool(description: "Operator")
    val: Float @tool(description: "Value for operator")
    arr: [Float] @tool(description: "Array for operator")
    skipNull: Boolean = false @tool(description: "Skip null value")
}
input With {
    type: String
    from: String
    to: String
}
input Invoke {
    className: String
    methodName: String
    parameters: [InvokeParameter]
    returnClassName: String
    thrownTypes: [String]
    async: Boolean = false
    directiveName: String
    onField: Boolean = false
    onInputValue: Boolean = false
    onExpression: Boolean = false
}
input InvokeParameter {
    name: String
    className: String
}
input OperatorExpression {
    opr: Operator = EQ
    val: Operator
    arr: [Operator]
}
input ConditionalExpression {
    opr: Operator = EQ
    val: Conditional
    arr: [Conditional]
}
input SortExpression {
    opr: Operator = EQ
    val: Sort
    arr: [Sort]
}
input FuncExpression {
    opr: Operator = EQ
    val: Func
    arr: [Func]
}
input ProtocolExpression {
    opr: Operator = EQ
    val: Protocol
    arr: [Protocol]
}
directive @options(type: String default: String length: Int decimals: Int unique: Boolean autoIncrement: Boolean protocol: Protocol = GRPC) on FIELD_DEFINITION
directive @map(from: String! with: With to: String anchor: Boolean) on FIELD_DEFINITION
directive @fetch(protocol: Protocol from: String! with: With to: String anchor: Boolean) on FIELD_DEFINITION
directive @invoke(className: String methodName: String parameters: [InvokeParameter] returnClassName: String async: Boolean = false) on FIELD_DEFINITION | INPUT_OBJECT | QUERY | MUTATION | SUBSCRIPTION
directive @invokes(methods: [Invoke]) on FIELD_DEFINITION | INPUT_OBJECT | QUERY | MUTATION | SUBSCRIPTION
directive @cursor on FIELD_DEFINITION
directive @func(name: Func field: String) on FIELD_DEFINITION
directive @container on OBJECT
directive @class(name: String! exists: Boolean) on OBJECT
directive @annotation(name: String!) on OBJECT
directive @grpc(name: String!) on OBJECT
directive @package(name: String!) on OBJECT | FIELD_DEFINITION | QUERY | MUTATION | SUBSCRIPTION
directive @connection(field: String agg: String) on FIELD_DEFINITION
directive @format(value: String locale: String) on FIELD | FIELD_DEFINITION
directive @hide on FIELD | FIELD_DEFINITION
directive @merge on FIELD
directive @uniqueMerge on FIELD
directive @permitAll on FIELD | OBJECT
directive @denyAll on FIELD | OBJECT
directive @rolesAllowed(roles: [String]) on FIELD | OBJECT
directive @implements(interfaces: [String]) on OBJECT | INPUT_OBJECT
directive @interface on OBJECT | INPUT_OBJECT
directive @include(if: Boolean = true) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean = true) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @tool(name: String description: String) on INTERFACE | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_OBJECT | INPUT_FIELD_DEFINITION | ENUM | ENUM_VALUE
